package day0316;
// 캡슐화(Encapsulation)
// 캡슐화란 클래스 내부의 내용을 숨겨서 외부가 해당 클래스를
// 오직 객체를 통째로 만들어서 사용할 수 있게 만드는 것이다.
// 캡슐화의 개념은 데이터의 은닉화와도 연결이 되는데
// 데이터의 은닉화는 해당 클래스의 모든 필드를 외부가 볼 수 없게 설정하고
// 그리고 메소드들 중에서 외부가 사용할 것이 아니면 전부 다 볼 수 없게 설정하는 것이다.

// 즉, 우리의 클래스의 특정 메소드를 사용하려면, 메소드만 따로 불러와서 사용하는 것이 아니라
// 해당 클래스 객체를 통째로 만들어야 사용할 수 있게 만드는 것이다.

// 이 캡슐화와 그리고 데이터 은닉화에서 중요해지는 것이 바로
// "private" 접근제한자이다.

// private 접근제한자가 걸려있는 필드에 값을 저장하거나 저장된 값을 불러올 떄에는
// 우리가 직접적으로 객체이름.필드이름 으로 접근하는 것이 아니라
// 해당 객체의 메소드를 사용해서 간접적으로 접근하게 된다.
// 필드에 값을 넣는 메소드를 우리가 setter 메소드라고 부르고
// 저장된 값을 불러오는 메소드를 우리가 getter 메소드라고 부른다.

// setter 메소드는 주로 다음과 같은 형태를 가진다.
// public void set필드이름(필드와 같은 파라미터) {
//      this.필드이름 = 파라미터;
// }

// getter메소드는 주로 다음과 같은 형태를 가진다.
// public 필드타입 get필드이름() {
//      return 필드이름;
// }

public class Ex03Encapsulation {
    public static void main(String[] args) {
        // Student 클래스 객체를 만들어서 각각의 필드에 값을 넣고 출력해보자
        Student s = new Student();
        s.id = 3;
        s.name = "권은지";
        System.out.printf("번호: %d 이름: %s\n", s.id, s.name);
        
        // Student2클래스 객체를 만들어서 각각의 필드에 값을 넣고 출력해보자
        Student2 s2 = new Student2();
        // s2.id = 3; -> 해당 필드는 private 접근제한자가 걸려있으므로 이렇게 직접 접근이 불가능하다.
        s2.setId(3);
        s2.setName("권은지");
        
        System.out.printf("번호: %d 이름: %s\n", s2.getId(), s2.getName());
        
        
    }

}
